@startuml IT_Youth_Talent_Incubator_MVP_API_Flows

actor "Student" as student
actor "Company" as company
participant "Nginx" as nginx
participant "Express API" as api
participant "Auth Middleware" as auth
participant "Joi Validation" as validation
participant "MongoDB" as mongo
participant "Agenda.js" as agenda
participant "File Storage" as storage

' === Flow 1: Student Registration and CV Upload ===
group Student Registration
  student -> nginx: POST /auth/register\n{email, password, role: "student"}
  nginx -> api: Forward HTTPS request
  api -> validation: Validate input
  validation --> api: Valid
  api -> mongo: Create user
  mongo --> api: User ID
  api -> student: 200 {token: JWT}
  note right: JWT contains {_id, role: "student"}
end group

group Student Profile Creation
  student -> nginx: POST /students\n{first_name, last_name, bio, skills, education, work_experience}\nHeader: Bearer <JWT>
  nginx -> api: Forward HTTPS request
  api -> auth: Verify JWT, check role: "student"
  auth --> api: Valid
  api -> validation: Validate input
  validation --> api: Valid
  api -> mongo: Create student_profile\n{user_id, ...}
  mongo --> api: Student Profile
  api -> student: 200 {student_profile}
end group

group Student CV Upload
  student -> nginx: POST /students/cv\nForm-data: cv (PDF file)\nHeader: Bearer <JWT>
  nginx -> api: Forward HTTPS request
  api -> auth: Verify JWT, check role: "student"
  auth --> api: Valid
  api -> validation: Validate file (PDF, <5MB)
  validation --> api: Valid
  api -> storage: Save PDF to /app/uploads/resumes/
  storage --> api: Filename
  api -> mongo: Update student_profile\n{cv_url: "https://domain/uploads/resumes/filename"}
  mongo --> api: Updated Profile
  api -> student: 200 {cv_url}
end group

' === Flow 2: Job Posting and Application ===
group Company Registration
  company -> nginx: POST /auth/register\n{email, password, role: "company"}
  nginx -> api: Forward HTTPS request
  api -> validation: Validate input
  validation --> api: Valid
  api -> mongo: Create user
  mongo --> api: User ID
  api -> company: 200 {token: JWT}
  note right: JWT contains {_id, role: "company"}
end group

group Company Profile Creation
  company -> nginx: POST /companies\n{name, description, industry, website}\nHeader: Bearer <JWT>
  nginx -> api: Forward HTTPS request
  api -> auth: Verify JWT, check role: "company"
  auth --> api: Valid
  api -> validation: Validate input
  validation --> api: Valid
  api -> mongo: Create company_profile\n{user_id, ...}
  mongo --> api: Company Profile
  api -> company: 200 {company_profile}
end group

group Job Posting
  company -> nginx: POST /jobs\n{title, description, location, job_type, requirements, application_deadline}\nHeader: Bearer <JWT>
  nginx -> api: Forward HTTPS request
  api -> auth: Verify JWT, check role: "company"
  auth --> api: Valid
  api -> validation: Validate input
  validation --> api: Valid
  api -> mongo: Create job\n{company_id, ...}
  mongo --> api: Job ID
  api -> company: 200 {job}
end group

group Job Application (CQRS)
  student -> nginx: POST /applications\n{job_id, cover_letter}\nHeader: Bearer <JWT>
  nginx -> api: Forward HTTPS request
  api -> auth: Verify JWT, check role: "student"
  auth --> api: Valid
  api -> validation: Validate input
  validation --> api: Valid
  api -> agenda: Queue application job\n{job_id, student_id, cover_letter}
  agenda --> mongo: Create application\n{job_id, student_id, ...}
  mongo --> agenda: Application ID
  agenda --> api: Job completed
  api -> student: 202 {message: "Application submitted"}
end group

group Retrieve Applications
  company -> nginx: GET /applications?job_id=<id>\nHeader: Bearer <JWT>
  nginx -> api: Forward HTTPS request
  api -> auth: Verify JWT, check role: "company"
  auth --> api: Valid
  api -> mongo: Query applications\n{job_id, company_id match}
  mongo --> api: Application list
  api -> company: 200 {applications}
end group

' Notes
note left of nginx
  HTTPS enforced via Let's Encrypt
  Redirects HTTP to HTTPS
end note

note right of api
  All endpoints protected by JWT
  Role-based access control (RBAC)
end note

note left of mongo
  MongoDB M2 tier
  Encrypted at rest
  IP whitelisted (Droplet IP)
end note

note right of agenda
  CQRS for applications
  Async job processing
end note

@enduml