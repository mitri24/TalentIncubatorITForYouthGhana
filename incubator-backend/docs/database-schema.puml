@startuml IT_Youth_Talent_Incubator_MVP_Database_Schema

!define PRIMARY_KEY(x) <b><color:red>x</color></b>
!define FOREIGN_KEY(x) <color:blue>x</color>
!define UNIQUE(x) <color:green>x</color>
!define ENUM(x) <color:purple>x</color>

title IT Youth Talent Incubator - MVP Database Schema (MongoDB)

' User Management
package "User Management" {
  entity "users" as users {
    PRIMARY_KEY(_id) : ObjectId
    --
    UNIQUE(email) : String
    password_hash : String
    photo_url: String
    ENUM(role) : ('student', 'company', 'admin')
    is_active : Boolean DEFAULT true
    ENUM(status) : String ('approved', 'pending', 'deleted', 'rejected')
    email_verified : Boolean DEFAULT false
    --
    created_at : Date
    updated_at : Date
    deleted_at : Date
    last_login : Date
    email_verified_at : Date
  }
}

' Student Domain
package "Student Domain" {
  entity "student_profiles" as students {
    PRIMARY_KEY(_id) : ObjectId
    --
    FOREIGN_KEY(user) : ObjectId
    first_name : String
    last_name : String
    bio : String
    social: Array
    - name : String
    - url : String
    cv_url : String
    skills : [String]
    --
    == Education ==
    education : Array
    - university : String
    - degree : String
    - field_of_study : String
    - start_date : Date
    - end_date : Date
    - is_current : Boolean
    --
    == Work Experience ==
    work_experience : Array
    - title : String
    - company : String
    - location : String
    - start_date : Date
    - end_date : Date
    - is_current : Boolean
    - description : String
    --
    ENUM(status) : ('active', 'job_seeking', 'inactive')
    --
    created_at : Date
    updated_at : Date
  }
}

' Company Domain
package "Company Domain" {
  entity "company_profiles" as companies {
    PRIMARY_KEY(_id) : ObjectId
    --
    FOREIGN_KEY(user) : ObjectId
    name : String
    description : String
    industry : String
    website : String
    social_links: Array
    - name : String
    - url : String
    --
    created_at : Date
    updated_at : Date
  }
}

' Job Management
package "Job Management" {
  entity "jobs" as jobs {
    PRIMARY_KEY(_id) : ObjectId
    --
    FOREIGN_KEY(company_id) : ObjectId
    title : String
    description : String
    location : String
    ENUM(job_type) : ('full-time', 'part-time', 'internship', 'remote')
    requirements : [String]
    ENUM(status) : ('active', 'closed', 'draft', 'deleted')
    application_deadline : Date
    --
    created_at : Date
    updated_at : Date
    deleted_at : Date
    deleted_by(user_id[Company or Admin]) : ObjectId
  }
}

' Application Management
package "Application Management" {
  entity "applications" as applications {
    PRIMARY_KEY(_id) : ObjectId
    --
    FOREIGN_KEY(job_id) : ObjectId
    FOREIGN_KEY(student_id) : ObjectId
    --
    cover_letter : String
    ENUM(status) : ('pending', 'reviewing', 'approved', 'rejected', 'deleted')
    --
    applied_date : Date
    updated_at : Date
    deleted_at : Date
  }

  note bottom of applications
    Supports CQRS:
    - Commands: Async writes via Agenda.js
    - Queries: Direct reads for status/details
    Composite unique index: (job_id, student_id)
  end note
}


' Password Reset Tokens
  entity "password_reset_tokens" as password_reset_tokens {
    PRIMARY_KEY(_id) : ObjectId
    --
    FOREIGN_KEY(user_id) : ObjectId
    token : String
    expires_at : Date
    -- 
    created_at : Date
    used_at : Date
    is_used : Boolean DEFAULT false
  }

  note bottom of password_reset_tokens
    Stores tokens for password reset functionality
    with expiration and usage tracking
  end note

' Refresh Tokens
  entity "refresh_tokens" as refresh_tokens {
    PRIMARY_KEY(_id) : ObjectId
    --
    FOREIGN_KEY(user_id) : ObjectId
    token : String
    user_agent : String
    ip_address : String
    expires_at : Date
    --
    created_at : Date
    revoked_at : Date
    is_revoked : Boolean DEFAULT false
  }

  note bottom of refresh_tokens
    Stores refresh tokens for session management
    with expiration and revocation tracking
  end note

' ========== RELATIONSHIPS ==========

' User relationships (One-to-One)
users ||--o| students : "user_id"
users ||--o| companies : "user_id"
users ||--o{ password_reset_tokens : "user_id"
users ||--o{ refresh_tokens : "user_id"

' Student relationships
students ||--o{ applications : "student_id"

' Company relationships
companies ||--o{ jobs : "company_id"

' Job relationships
jobs ||--o{ applications : "job_id"

' Legend
legend right
  |= Color |= Meaning |
  | <color:red>Red</color> | Primary Key |
  | <color:blue>Blue</color> | Foreign Key |
  | <color:green>Green</color> | Unique Key |
  | <color:purple>Purple</color> | Enum Value |
endlegend

note top of users
  Core authentication collection
  Supports 2 user types:
  - student
  - company
end note

note top of students
  Stores student details
  with embedded education,
  work experience, and CV link
end note

note top of jobs
  Job postings with
  embedded requirements array
end note

note top of applications
  Tracks job applications
  with CQRS support for
  async writes and fast reads
end note

@enduml